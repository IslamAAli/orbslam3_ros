#!/bin/bash

# roscore to have a single master, used for the whole network
roscore

# source 
source ~/catkin_ws/devel/setup.bash

# run ffmpeg to ros bridge
rosrun ffmpeg2ros ffmpeg2ros half grey

# run inertactive session on docker 
docker exec -it <docker container id> bash

# allow GUI on docker image (you can add it to the ~/.bashrc)
xhost +local:docker

# run the camera publishing node
roslaunch spinnaker_camera_driver camera.launch 

# image compression for network transfer
rosrun image_transport republish compressed in:=/camera/image_raw out:=/camera/compressed 

# running CARV with Flir camera on robot
rosrun ORB_CARV_Pub Mono Vocabulary/ORBvoc.txt config_files/Flir_U3_23S3C_C_half.yaml /camera/image_raw:=/rtsp_camera/image

# running CARV with usb web camera on robot
rosrun ORB_CARV_Pub Mono Vocabulary/ORBvoc.txt config_files/Logitech_c270_HD720p.yaml /camera/image_raw:=/usb_cam/image_raw

# run SLAM CARV in debugging with gdb
rosrun --prefix 'gdb -ex run --args' ORB_CARV_Pub Mono Vocabulary/ORBvoc.txt config_files/Logitech_c270_HD720p.yaml /camera/image_raw:=/usb_cam/image_raw


##################################################################
# run master orb-slam3 original
rosrun ORB_SLAM3 Mono Vocabulary/ORBvoc.txt config_files/Logitech_c270_HD720p.yaml /camera/image_raw:=/usb_cam/image_raw

# run SLAM CARV in debugging with gdb
rosrun --prefix 'gdb -ex run --args' ORB_SLAM3 Mono Vocabulary/ORBvoc.txt config_files/Logitech_c270_HD720p.yaml /camera/image_raw:=/usb_cam/image_raw
##################################################################



# save edits to docker container 
docker commit 8e33d8d6840a islamaali/orbslam3_ros-docker:v1.0
